/**
 * Exemple d'utilisation du syst√®me d'analyse de structure HTML
 * 
 * Usage:
 *   deno run -A examples/analyze_html_structure.ts <fichier.html>
 */

import { analyzeHTMLStructureSync } from "../src/html-structure/mod.ts";

// ============================================================================
// FONCTION PRINCIPALE
// ============================================================================

async function main() {
  const args = Deno.args;

  if (args.length === 0) {
    console.error("‚ùå Usage: deno run -A examples/analyze_html_structure.ts <fichier.html>");
    Deno.exit(1);
  }

  const filePath = args[0];

  try {
    // Lire le fichier HTML
    console.log(`üìñ Lecture du fichier: ${filePath}\n`);
    const html = await Deno.readTextFile(filePath);

    // Analyser la structure
    console.log("üîç Analyse de la structure HTML en cours...\n");
    const [err, result] = analyzeHTMLStructureSync(html);

    if (err) {
      console.error(`‚ùå Erreur d'analyse: ${err.message}`);
      Deno.exit(1);
    }

    // Afficher les r√©sultats
    console.log("=" .repeat(80));
    console.log("üìä R√âSULTATS DE L'ANALYSE");
    console.log("=" .repeat(80));
    console.log();

    // Statistiques globales
    console.log("üìà STATISTIQUES DU DOCUMENT");
    console.log("-".repeat(80));
    console.log(`  ‚Ä¢ Nombre total de mots: ${result.documentStats.totalWords}`);
    console.log(`  ‚Ä¢ Nombre total de n≈ìuds HTML: ${result.documentStats.totalNodes}`);
    console.log(`  ‚Ä¢ Profondeur maximale: ${result.documentStats.maxTreeDepth}`);
    console.log(`  ‚Ä¢ Types de balises uniques: ${result.documentStats.uniqueTags}`);
    console.log(`  ‚Ä¢ Balises s√©mantiques HTML5: ${result.documentStats.hasSemanticHTML ? "‚úÖ Oui" : "‚ùå Non"}`);
    console.log(`  ‚Ä¢ Temps de traitement: ${result.processingTimeMs.toFixed(2)}ms`);
    console.log();

    // Top balises
    console.log("üè∑Ô∏è  TOP 5 BALISES LES PLUS UTILIS√âES");
    console.log("-".repeat(80));
    result.documentStats.topTags.slice(0, 5).forEach((tag, i) => {
      console.log(`  ${i + 1}. <${tag.tag}> : ${tag.count} occurrences`);
    });
    console.log();

    // Profil de profondeur
    console.log("üìè PROFIL DE PROFONDEUR");
    console.log("-".repeat(80));
    console.log(`  ‚Ä¢ Profondeur minimale: ${result.depthProfile.minDepth}`);
    console.log(`  ‚Ä¢ Profondeur maximale: ${result.depthProfile.maxDepth}`);
    console.log(`  ‚Ä¢ Profondeur moyenne: ${result.depthProfile.averageDepth.toFixed(2)}`);
    console.log(`  ‚Ä¢ Profondeur m√©diane: ${result.depthProfile.medianDepth}`);
    console.log(`  ‚Ä¢ √âcart-type: ${result.depthProfile.stdDeviation.toFixed(2)}`);
    console.log(`  ‚Ä¢ Transitions d√©tect√©es: ${result.depthProfile.transitions.length}`);
    console.log(`  ‚Ä¢ Plateaux d√©tect√©s: ${result.depthProfile.plateaus.length}`);
    console.log();

    // Histogramme de profondeur (simplifi√©)
    console.log("üìä DISTRIBUTION DES PROFONDEURS");
    console.log("-".repeat(80));
    const sortedDepths = Array.from(result.depthProfile.histogram.entries())
      .sort((a, b) => a[0] - b[0]);
    
    for (const [depth, count] of sortedDepths) {
      const bar = "‚ñà".repeat(Math.min(50, Math.floor(count / 2)));
      const percent = ((count / result.allWords.length) * 100).toFixed(1);
      console.log(`  Profondeur ${depth}: ${bar} ${count} mots (${percent}%)`);
    }
    console.log();

    // Blocs d'int√©r√™t d√©tect√©s
    console.log("üéØ ZONES D'INT√âR√äT D√âTECT√âES");
    console.log("-".repeat(80));
    console.log(`  ${result.blocks.length} zones d'int√©r√™t trouv√©es\n`);

    if (result.blocks.length === 0) {
      console.log("  ‚ö†Ô∏è  Aucune zone d'int√©r√™t d√©tect√©e avec les crit√®res actuels.");
    } else {
      result.blocks.forEach((block, index) => {
        console.log(`  üìç BLOC #${index + 1}`);
        console.log(`     ‚îú‚îÄ Score de qualit√©: ${(block.score * 100).toFixed(1)}% ${"‚òÖ".repeat(Math.round(block.score * 5))}`);
        console.log(`     ‚îú‚îÄ Nombre de mots: ${block.stats.wordCount}`);
        console.log(`     ‚îú‚îÄ Profondeur moyenne: ${block.averageDepth.toFixed(1)} (min: ${block.minDepth}, max: ${block.maxDepth})`);
        console.log(`     ‚îú‚îÄ Variance de profondeur: ${block.depthVariance.toFixed(2)}`);
        console.log(`     ‚îú‚îÄ Densit√© textuelle: ${block.stats.textDensity.toFixed(2)}`);
        console.log(`     ‚îú‚îÄ Balises dominantes: ${block.dominantTags.join(", ")}`);
        console.log(`     ‚îú‚îÄ Balises s√©mantiques: ${block.stats.hasSemantic ? "‚úÖ " + block.stats.semanticTags.join(", ") : "‚ùå Aucune"}`);
        
        // Raisons de d√©tection
        console.log(`     ‚îú‚îÄ D√©tect√© par:`);
        block.detectionReasons.forEach((reason) => {
          console.log(`     ‚îÇ  ‚Ä¢ ${reason.explanation}`);
        });
        
        // Preview du texte
        console.log(`     ‚îî‚îÄ Aper√ßu du contenu:`);
        const preview = block.textPreview.length > 100 
          ? block.textPreview.substring(0, 100) + "..."
          : block.textPreview;
        console.log(`        "${preview}"`);
        console.log();
      });
    }

    console.log("=" .repeat(80));
    console.log("‚úÖ Analyse termin√©e avec succ√®s!");
    console.log("=" .repeat(80));

  } catch (error) {
    console.error(`‚ùå Erreur: ${error.message}`);
    Deno.exit(1);
  }
}

// Ex√©cuter
if (import.meta.main) {
  main();
}

